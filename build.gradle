buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
	}
}

apply plugin: 'idea'
apply plugin: "net.minecraftforge.gradle"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

file "build.properties" withReader {
	def prop = new Properties()
	prop.load(it)
	ext.config = new ConfigSlurper().parse prop
}

version = "${config.minecraft.version}-${config.dsyt.version}"
group = "vexatos.dsyt" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "DontStubYourToe"

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

configurations {
	provided
	embedded
	compile.extendsFrom provided, embedded
}

dependencies {
	minecraft([
			group  : "net.minecraftforge",
			name   : "forge",
			version: "${config.minecraft.version}-${config.forge.version}"
	])
}

minecraft {
	mappings channel: "snapshot", version: config.mappings

	runs {
		client {
			property 'forge.logging.console.level', 'debug'
			workingDirectory project.file('eclipse')
			mods {
				dsyt {
					source sourceSets.main
				}
			}
		}
		server {
			property 'forge.logging.console.level', 'debug'
			workingDirectory project.file('eclipse')
			mods {
				dsyt {
					source sourceSets.main
				}
			}
		}
		data {
			property 'forge.logging.console.level', 'debug'
			workingDirectory project.file('eclipse')
			args '--mod', 'dsyt', '--all', '--output', file('src/generated/resources/')
			mods {
				dsyt {
					source sourceSets.main
				}
			}
		}
	}
}

/*sourceSets {
	main {
		//output.resourcesDir = 'build/classes/main'
	}
}*/

idea {
	module {
		for (String excludeDirName in ["eclipse", "run", "out", "logs", "gradle"]) {
			File excludeDir = new File(projectDir, excludeDirName)
			excludeDirs.add(excludeDir)
		}
	}
}

task replaceResources(type: Copy) {
	outputs.upToDateWhen { false }
	from(sourceSets.main.resources.srcDirs) {
		include "META-INF/mods.toml"
		expand 'version': version, 'mc_version': config.minecraft.version_range, 'forge_version': config.forge.version_range
	}
	into "$buildDir/resources/main/"
}

processResources {
	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
	finalizedBy replaceResources
}

//For Building

def libDir = './build/libs'

task deobfJar(type: Jar) {
	description = 'Creates a jar file containing the non-obfuscated class files'
	classifier = 'deobf'
	destinationDir = file(libDir)
	from sourceSets.main.output.classesDir
}

task apiZip(type: Zip) {
	description = 'Creates a zip file containing the API source files only'
	classifier = 'api'
	destinationDir = file(libDir)
	from sourceSets.main.allSource
	include 'vexatos/dsyt/api/**'
}

task makeJars << {
	description = 'Creates the mod files'
}

makeJars.dependsOn clean, build, deobfJar, apiZip
build.shouldRunAfter clean
deobfJar.shouldRunAfter build
apiZip.shouldRunAfter deobfJar
